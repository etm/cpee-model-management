#!/usr/bin/ruby
curpath = __dir__
require 'rubygems'
require 'optparse'
require 'fileutils'
require 'xml/smart'
require 'zip'
require 'typhoeus'
require 'json'
require 'securerandom'
require 'redis'

def wrap(s, width=78, indent=18)
	lines = []
	line, s = s[0..indent-2], s[indent..-1]
  s.split(/\n/).each do |ss|
    ss.split(/[ \t]+/).each do |word|
      if line.size + word.size >= width
        lines << line
        line = (" " * (indent)) + word
      else
        line << " " << word
      end
    end
    lines << line if line
    line = (" " * (indent-1))
  end
	return lines.join "\n"
end

def js_libs(cockpit)
  res = Typhoeus.get('https://cpee.org/js_libs/js_libs.zip')
  if res.success?
    File.write(File.join(cockpit,'js_libs.zip'),res.response_body)
    Zip::File.open(File.join(cockpit,'js_libs.zip')) do |zip_file|
      zip_file.each do |entry|
        case entry.ftype
          when :directory
            Dir.mkdir(File.join(cockpit,entry.name)) rescue nil
          when :file
            File.write(File.join(cockpit,entry.name),entry.get_input_stream.read)
          when :symlink
            FileUtils.ln_s(File.join('.',entry.get_input_stream.read),File.join(cockpit,entry.name), force: true)
        end
      end
    end
    true
  else
    puts 'Internet access required to download javascript libs from "http://cpee.org/js_libs/js_libs.zip".'
    false
  end
end

ARGV.options { |opt|
  opt.summary_indent = ' ' * 2
  opt.summary_width = 15
  opt.banner = "Usage:\n#{opt.summary_indent}#{File.basename($0)} [options] convert | cpui DIR | new DIR\n"
  opt.on("Options:")
  opt.on("--help", "-h", "This text") { puts opt; exit }
	opt.on("")
  opt.on(wrap("[new DIR]         scaffolds a sample design server."))
	opt.on("")
  opt.on(wrap("[cpui DIR]        scaffolds a sample html client. New versions might require manual merging if you changed something."))
	opt.on("")
  opt.on(wrap("[convert]         converts all testsets in the current directory to design terminology."))
	opt.on("")
  opt.on(wrap("[consistent]      makes the instances db consistent. can only be run in server dir."))
  opt.parse!
}
if (ARGV.length == 0) ||
   (ARGV.length == 1  && !(%w(convert consistent).include?(ARGV[0]))) ||
   (ARGV.length == 2  && !(%w(cpui new).include?(ARGV[0]))) ||
   (ARGV.length >  2)
  puts ARGV.options
  exit
end
command = ARGV[0]
p1      = ARGV[1]
p2      = ARGV[2]
ui       = "#{curpath}/../ui/"

if command == 'cpui'
    if !File.exists?(p1)
      FileUtils.cp_r(ui,p1)
    else
      FileUtils.cp_r(Dir.glob(File.join(ui,'*')),p1,remove_destination: true)
      puts "Directory already exists, updating ..."
    end
    js_libs(p1)
elsif command == 'convert'
  Dir['*.xml'].each do |f|
    XML::Smart.open(f) do |doc|
      doc.register_namespace 'x', 'http://cpee.org/ns/properties/2.0'
      if doc.root.qname.name == 'testset'
        name = File.basename(f,'.xml')
        creator = author = design_dir = design_stage = nil

        if doc.find('/x:testset/x:attributes').length == 0
          n = doc.root.add('x:attributes')
        end

        if doc.find('/x:testset/x:attributes/x:model_uuid').length == 0
          n = doc.find('/x:testset/x:attributes').first
          n.add('x:model_uuid',SecureRandom.uuid)
        end
        if doc.find('/x:testset/x:attributes/x:theme').length == 0
          n = doc.find('/x:testset/x:attributes').first
          n.add('x:theme','extended')
        end
        if doc.find('/x:testset/x:attributes/x:info').length == 0
          n = doc.find('/x:testset/x:attributes').first
          n.add('x:info',name)
        end

        if (dt = doc.find('/x:testset/x:attributes/x:creator')).length > 0
          dt.each do |e|
            creator = e.text
          end
        else
          creator = 'Christine Ashcreek'
          doc.find('/x:testset/x:attributes').each do |e|
            e.add('x:creator',creator)
          end
        end

        if (dt = doc.find('/x:testset/x:attributes/x:author')).length > 0
          dt.each do |e|
            author = e.text
          end
        else
          author = 'Christine Ashcreek'
          doc.find('/x:testset/x:attributes').each do |e|
            e.add('x:author',author)
          end
        end

        if (dt = doc.find('/x:testset/x:attributes/x:design_stage')).length > 0
          dt.each do |e|
            design_stage = e.text
          end
        else
          design_stage = 'development'
          doc.find('/x:testset/x:attributes').each do |e|
            e.add('x:design_stage',design_stage)
          end
        end

        dd = ENV['PWD'] || Dir.pwd
        ma = dd.scan(/\/([^\/]+\.dir)/)
        design_dir = ma.join('/')
        if (dt = doc.find('/x:testset/x:attributes/x:design_dir')).length > 0
          dt.each do |e|
            e.text = design_dir
          end
        else
          doc.find('/x:testset/x:attributes').each do |e|
            e.add('x:design_dir',design_dir)
          end
        end

        if (dt = doc.find('/x:testset/x:attributes/x:info')).length > 0
          dt.each do |e|
            e.text = name
          end
        end


        attrs = doc.find('/x:testset/x:attributes/*').map do |e|
          [e.qname.name,e.text]
        end.to_h
        File.write(f + '.attrs',JSON::pretty_generate(attrs))

        File.unlink(f + '.creator') rescue nil
        File.unlink(f + '.author') rescue nil
        File.unlink(f + '.stage') rescue nil
      end
    end
  end
  Dir['*.dir'].each do |f|
    attrs = JSON::load File.open(f + '.attrs') rescue {}
    attrs['creator'] = File.read(f + '.creator') if File.exists?(f + '.creator')
    attrs['author'] = File.read(f + '.author') if File.exists?(f + '.author')
    File.write(f + '.attrs',JSON::pretty_generate(attrs))

    File.unlink(f + '.creator') rescue nil
    File.unlink(f + '.author') rescue nil
  end
elsif command == 'consistent'
  redis = Redis.new(path: 'redis.sock', db: 0)
  redis.keys('*/instances').each do |instances|
    engine = File.dirname(instances)
    s_ready = s_running = s_stopped = 0
    redis.lrange(instances,0,-1).each do |i|
      prefix = File.join(engine,i.to_s)
      url = redis.get(File.join(prefix,'instance-url'))
      res = Typhoeus.get(File.join(url,'properties','state'), :followlocation => true)
      parent = redis.get(File.join(prefix,'parent'))
      oldstate = redis.get(File.join(prefix,'state'))
      children = redis.lrange(File.join(prefix,'children'),0,-1)
      if res.success? && res.response_body != 'finished' && res.response_body != 'abandoned'
        case res.response_body
          when 'ready'
            s_ready += 1
          when 'running'
            s_running += 1
          when 'stopped'
            s_stopped += 1
        end
      else
        redis.multi do |multi|
          multi.decr(File.join(engine,oldstate)) rescue nil
          multi.incr(File.join(engine,'total_abandoned'))
          multi.lrem(File.join(engine,'instances'),0,i.to_s)
          multi.del(File.join(prefix,'instance-url'))
          multi.del(File.join(prefix,'author'))
          multi.del(File.join(prefix,'path'))
          multi.del(File.join(prefix,'name'))
          multi.del(File.join(prefix,'state'))
          multi.del(File.join(prefix,'cpu'))
          multi.del(File.join(prefix,'mem'))
          multi.del(File.join(prefix,'time'))
          children.each do |child|
            if parent
              multi.set(File.join(engine,child,'parent'),parent)
            else
              multi.del(File.join(engine,child,'parent'))
            end
          end
          multi.del(File.join(prefix,'children'))
          multi.del(File.join(prefix,'parent'))
          if parent
            multi.lrem(File.join(engine,parent,'children'),0,i.to_s)
          end
        end
      end
    end
    redis.multi do |multi|
      multi.set(File.join(engine,'ready'),s_ready.to_i)
      multi.set(File.join(engine,'running'),s_running.to_i)
      multi.set(File.join(engine,'stopped'),s_stopped.to_i)
    end
  end
elsif command == 'new'
  if !File.exists?(p1)
    FileUtils.mkdir(File.join(p1)) rescue nil
    FileUtils.cp_r("#{curpath}/../server/moma",p1) unless File.exists?(File.join('p1','moma'))
    FileUtils.cp_r("#{curpath}/../server/moma.conf",p1) unless File.exists?(File.join('p1','moma.conf'))
    FileUtils.cp_r("#{curpath}/../server/testset.xml",p1) unless File.exists?(File.join('p1','testset.xml'))
    FileUtils.cp_r("#{curpath}/../server/model.xml",p1) unless File.exists?(File.join('p1','model.xml'))
    FileUtils.mkdir(File.join(p1,'models')) rescue nil
  else
    puts 'Directory already exists.'
  end
end
