#!/usr/bin/ruby
curpath = __dir__
require 'rubygems'
require 'optparse'
require 'fileutils'
require 'xml/smart'
require 'zip'
require 'typhoeus'
require 'securerandom'

def wrap(s, width=78, indent=18)
	lines = []
	line, s = s[0..indent-2], s[indent..-1]
  s.split(/\n/).each do |ss|
    ss.split(/[ \t]+/).each do |word|
      if line.size + word.size >= width
        lines << line
        line = (" " * (indent)) + word
      else
        line << " " << word
      end
    end
    lines << line if line
    line = (" " * (indent-1))
  end
	return lines.join "\n"
end

def js_libs(cockpit)
  res = Typhoeus.get('https://cpee.org/js_libs/js_libs.zip')
  if res.success?
    File.write(File.join(cockpit,'js_libs.zip'),res.response_body)
    Zip::File.open(File.join(cockpit,'js_libs.zip')) do |zip_file|
      zip_file.each do |entry|
        case entry.ftype
          when :directory
            Dir.mkdir(File.join(cockpit,entry.name)) rescue nil
          when :file
            File.write(File.join(cockpit,entry.name),entry.get_input_stream.read)
          when :symlink
            FileUtils.ln_s(File.join('.',entry.get_input_stream.read),File.join(cockpit,entry.name), force: true)
        end
      end
    end
    true
  else
    puts 'Internet access required to download javascript libs from "http://cpee.org/js_libs/js_libs.zip".'
    false
  end
end

ARGV.options { |opt|
  opt.summary_indent = ' ' * 2
  opt.summary_width = 15
  opt.banner = "Usage:\n#{opt.summary_indent}#{File.basename($0)} [options] convert | cpui DIR | new DIR\n"
  opt.on("Options:")
  opt.on("--help", "-h", "This text") { puts opt; exit }
	opt.on("")
  opt.on(wrap("[new DIR]         scaffolds a sample design server."))
	opt.on("")
  opt.on(wrap("[cpui DIR]        scaffolds a sample html client. New versions might require manual merging if you changed something."))
	opt.on("")
  opt.on(wrap("[convert]         converts all testsets in the current directory to design terminology."))
  opt.parse!
}
if (ARGV.length == 0) ||
   (ARGV.length == 1  && !(%w(convert).include?(ARGV[0]))) ||
   (ARGV.length == 2  && !(%w(cpui new).include?(ARGV[0]))) ||
   (ARGV.length >  2)
  puts ARGV.options
  exit
end
command = ARGV[0]
p1      = ARGV[1]
p2      = ARGV[2]
ui       = "#{curpath}/../ui/"

if command == 'cpui'
    if !File.exists?(p1)
      FileUtils.cp_r(ui,p1)
    else
      FileUtils.cp_r(Dir.glob(File.join(ui,'*')),p1,remove_destination: true)
      puts "Directory already exists, updating ..."
    end
    js_libs(p1)
elsif command == 'convert'
  Dir['*.xml'].each do |f|
    XML::Smart.modify(f) do |doc|
      doc.register_namespace 'x', 'http://cpee.org/ns/properties/2.0'
      if doc.root.qname.name == 'testset'
        name = File.basename(f,'.xml')
        creator = author = design_dir = design_stage = nil

        if doc.find('/x:testset/x:attributes').length == 0
          n = doc.root.add('x:attributes')
        end

        if doc.find('/x:testset/x:attributes/x:model_uuid').length == 0
          n = doc.find('/x:testset/x:attributes').first
          n.add('x:model_uuid',SecureRandom.uuid)
        end
        if doc.find('/x:testset/x:attributes/x:theme').length == 0
          n = doc.find('/x:testset/x:attributes').first
          n.add('x:theme','extended')
        end
        if doc.find('/x:testset/x:attributes/x:info').length == 0
          n = doc.find('/x:testset/x:attributes').first
          n.add('x:info',name)
        end

        if (dt = doc.find('/x:testset/x:attributes/x:creator')).length > 0
          dt.each do |e|
            creator = e.text
          end
        else
          creator = 'Christine Ashcreek'
          doc.find('/x:testset/x:attributes').each do |e|
            e.add('x:creator',creator)
          end
        end
        File.write(f + '.creator',creator)

        if (dt = doc.find('/x:testset/x:attributes/x:author')).length > 0
          dt.each do |e|
            author = e.text
          end
        else
          author = 'Christine Ashcreek'
          doc.find('/x:testset/x:attributes').each do |e|
            e.add('x:author',author)
          end
        end
        File.write(f + '.author',author)

        if (dt = doc.find('/x:testset/x:attributes/x:design_stage')).length > 0
          dt.each do |e|
            design_stage = e.text
          end
        else
          design_stage = 'development'
          doc.find('/x:testset/x:attributes').each do |e|
            e.add('x:design_stage',design_stage)
          end
        end
        File.write(f + '.stage',design_stage)

        dd = ENV['PWD'] || Dir.pwd
        ma = dd.scan(/\/([^\/]+\.dir)/)
        design_dir = ma.join('/')
        if (dt = doc.find('/x:testset/x:attributes/x:design_dir')).length > 0
          dt.each do |e|
            e.text = design_dir
          end
        else
          doc.find('/x:testset/x:attributes').each do |e|
            e.add('x:design_dir',design_dir)
          end
        end

        if (dt = doc.find('/x:testset/x:attributes/x:info')).length > 0
          dt.each do |e|
            e.text = name
          end
        end
      end
    end
  end
elsif command == 'new'
  if !File.exists?(p1)
    FileUtils.mkdir(File.join(p1)) rescue nil
    FileUtils.cp_r("#{curpath}/../server/moma",p1) unless File.exists?(File.join('p1','moma'))
    FileUtils.cp_r("#{curpath}/../server/moma.conf",p1) unless File.exists?(File.join('p1','moma.conf'))
    FileUtils.cp_r("#{curpath}/../server/testset.xml",p1) unless File.exists?(File.join('p1','testset.xml'))
    FileUtils.cp_r("#{curpath}/../server/model.xml",p1) unless File.exists?(File.join('p1','model.xml'))
    FileUtils.mkdir(File.join(p1,'models')) rescue nil
  else
    puts 'Directory already exists.'
  end
end
